name: Build All Binaries

on:
  workflow_dispatch:
jobs:

  prepare-project:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          
      - name: Run lints
        run: |
          cd eltonkola
          ./gradlew shared:lint   

  build-android:
    runs-on: ubuntu-latest
    needs: [prepare-project]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          
      - name: Build APK
        run: |
          cd eltonkola
          ./gradlew androidApp:assembleRelease
     
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: eltonkola/androidApp/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
        
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}
          
      #- name: Upload to slack step
      #  uses: MeilCli/slack-upload-file@v3
      #  with:
      #    slack_token: ${{ secrets.SLACK_TOKEN }}
      #    channel_id: 'C01PMHNE40Z'
      #    file_path: ${{steps.sign_app.outputs.signedReleaseFile}}
      #    file_name: 'eltonKola.apk'
      #    file_type: 'apk'
      #    initial_comment: 'post by slack-upload-file'

  build-linux:
    runs-on: ubuntu-latest
    needs: [prepare-project]
    steps:
     
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          
      - name: Build Deb
        run: |
          cd eltonkola
          ./gradlew desktopApp:packageDeb
        
      - name: Upload DEB
        uses: actions/upload-artifact@v3
        with:
          name: app.deb
          path: eltonkola/desktopApp/build/compose/binaries/main/deb/eltonkola_1.0.0-1_amd64.deb

  build-web:
    runs-on: ubuntu-latest
    needs: [prepare-project] 
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          
      - name: Build Deb
        run: |
          cd eltonkola
          ./gradlew jsApp:jsBrowserDistribution
          zip -jr web.zip jsApp/build/distributions/
        
      - name: Upload Web
        uses: actions/upload-artifact@v3
        with:
          name: web.zip
          path: eltonkola/web.zip


  build-windows:
    runs-on: windows-latest
    needs: [prepare-project]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
      
      - name: Build Exe
        run: |
          cd eltonkola
          ./gradlew desktopApp:packageMsi
                  
      - name: Upload Msi
        uses: actions/upload-artifact@v3
        with:
          name: app.msi
          path: eltonkola\desktopApp\build\compose\binaries\main\msi\EltonKola-1.0.0.msi

  build-macos:
    runs-on: macos-latest
    needs: [prepare-project]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          
      - name: Build Dmg
        run: |
          cd eltonkola
          ./gradlew desktopApp:packageDmg
                  
      - name: Upload Dmg
        uses: actions/upload-artifact@v3
        with:
          name: app.dmg
          path: eltonkola/desktopApp/build/compose/binaries/main/dmg/EltonKola-1.0.0.dmg

  build-ios:
    runs-on: macos-latest
    needs: [prepare-project]
    steps:
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      - name: Build project
        run: |
          cd eltonkola
          ./gradlew shared:iosArm64Binaries
          
      - name: build archive
        run: |
          cd eltonkola/iosApp
          pod install
          xcodebuild -scheme "iosApp" \
          -archivePath $RUNNER_TEMP/eltonkola.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive          

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          cd eltonkola/iosApp
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/eltonkola.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app.ipa
          path: ${{ runner.temp }}/build/iosApp.ipa
          retention-days: 3
          
  update-website:
    runs-on: ubuntu-latest
    needs: [build-web]
    steps:
   
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
        
      - name: Copy all files
        run: |
          rm -rf docs/web/
          mkdir docs/web/
          
      - uses: actions/download-artifact@v3
        with:
          name: web.zip
          path: downloads/
      
      - name: Copy web files
        run: |
          unzip -o downloads/web.zip -d docs/
          rm downloads/web.zip
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: 'update website content'
          branch: website_update
          delete-branch: true
          title: '[publish] Update website and app binary'
          assignees: ${{ github.actor}}
          body: |
            Update website
            - Updated app binaries

  publish-release:
    runs-on: ubuntu-latest
    needs: [build-android, build-macos, build-windows, build-web, build-linux] #, build-ios
    steps:
            
        
      - uses: actions/download-artifact@v3
        with:
          name: app.deb
          path: downloads/
          
      - uses: actions/download-artifact@v3
        with:
          name: app.msi
          path: downloads/
          
      - uses: actions/download-artifact@v3
        with:
          name: app.dmg
          path: downloads/
          
      - uses: actions/download-artifact@v3
        with:
          name: web.zip
          path: downloads/
               
      #- uses: actions/download-artifact@v3
      #  with:
      #    name: app.ipa
      #    path: downloads/
      
      - uses: actions/download-artifact@v3
        with:
          name: app.apk
          path: downloads/
    
      - name: Show files
        run: |
          cd downloads/
          ls
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: v1 #${{ github.ref }}
          release_name: Release v1 #${{ github.ref }} 
          
      - name: Upload Release APK
        id: upload_release_apk
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloads/androidApp-release-unsigned-signed.apk
          asset_name: ek.apk
          asset_content_type: application/zip
          
      - name: Upload Release Deb
        id: upload_release_deb
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloads/eltonkola_1.0.0-1_amd64.deb
          asset_name: ek-amd64.deb
          asset_content_type: application/zip
          
      - name: Upload Release Msi
        id: upload_release_msi
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloads/EltonKola-1.0.0.msi
          asset_name: ek.msi
          asset_content_type: application/zip
          

      - name: Upload Release Dmg
        id: upload_release_dmg
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloads/EltonKola-1.0.0.dmg
          asset_name: ek.dmg
          asset_content_type: application/zip
          
          
      - name: Upload Release Web
        id: upload_release_web
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloads/web.zip
          asset_name: web.zip
          asset_content_type: application/zip
